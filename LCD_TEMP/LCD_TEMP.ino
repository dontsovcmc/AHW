
#include "U8glib.h"
#include <OneWire.h>
#include <DallasTemperature.h>

#define SCK_PIN  8
#define MOSI_PIN 7
#define CS_PIN   6

#define TEMP_PIN 10

U8GLIB_ST7920_128X64_4X u8g(SCK_PIN, MOSI_PIN, CS_PIN);	// SPI Com: SCK = en = 18, MOSI = rw = 16, CS = di = 17

OneWire  oneWire(TEMP_PIN);  // on pin 10 (a 4.7K resistor is necessary)
DallasTemperature sensors(&oneWire);
DeviceAddress insideThermometer = { 0x28, 0x41, 0xAC, 0x23, 0x05, 0x0, 0x0, 0x83 };

const uint8_t rook_bitmap[] U8G_PROGMEM = {
0x0, 0x7, 0x81, 0xFF, 0x0, 0x0, 
0x0, 0x3F, 0x8F, 0xFF, 0xF0, 0x0, 
0x0, 0x7F, 0x3F, 0xFF, 0xF8, 0x0, 
0x0, 0xFE, 0x7F, 0xFF, 0xFE, 0x0, 
0x1, 0xFC, 0xFE, 0x0, 0x7F, 0x0, 
0x3, 0xF1, 0xF0, 0x0, 0x1F, 0x80, 
0x7, 0xC1, 0xC0, 0x0, 0x7, 0x80, 
0xF, 0x3, 0x80, 0x7C, 0x1, 0xC0, 
0x1E, 0x7, 0x3, 0xFF, 0xC0, 0xE0, 
0x1C, 0x7, 0x1F, 0xFF, 0xF0, 0xE0, 
0x38, 0xCE, 0x3F, 0xFF, 0xFC, 0x70, 
0x38, 0xEC, 0xFF, 0x1, 0xFF, 0x30, 
0x71, 0xE8, 0xF8, 0x0, 0x3F, 0x30, 
0x63, 0xC1, 0xE0, 0x0, 0xF, 0x90, 
0x67, 0xC3, 0xC0, 0x0, 0x3, 0xC0, 
0xEF, 0x83, 0x0, 0xFF, 0x81, 0xE0, 
0xCF, 0x7, 0x7, 0xFF, 0xF0, 0xE0, 
0xDE, 0x6, 0x1F, 0xFF, 0xFC, 0xF0, 
0xDC, 0x8C, 0x7F, 0xFF, 0xFF, 0x70, 
0xD9, 0xCC, 0xFF, 0x0, 0xFF, 0x30, 
0xC3, 0xC0, 0xFC, 0x0, 0x3F, 0x90, 
0xE7, 0xC1, 0xF0, 0x0, 0xF, 0xC0, 
0xEF, 0x83, 0xE0, 0x0, 0x3, 0xC0, 
0xEF, 0x3, 0xCF, 0x0, 0x81, 0xE0, 
0xE6, 0x7, 0x9F, 0x80, 0x80, 0xF0, 
0xF4, 0x7, 0x1F, 0xC1, 0x80, 0xF0, 
0x78, 0x7, 0x1F, 0xC3, 0x0, 0x70, 
0x78, 0xE, 0x1F, 0xC3, 0x0, 0x78, 
0x7C, 0xC, 0x1F, 0x87, 0x1, 0xB8, 
0x3E, 0xC, 0xF, 0x8F, 0x3, 0xB8, 
0x3F, 0x0, 0x7, 0x3F, 0xF, 0xB8, 
0x1F, 0x80, 0x0, 0x7E, 0x1F, 0x18, 
0x4F, 0xE0, 0x0, 0xFC, 0x1F, 0x18, 
0x67, 0xFE, 0x7, 0xF8, 0x9E, 0xD8, 
0x73, 0xFF, 0xFF, 0xF0, 0x88, 0xD8, 
0x38, 0xFF, 0xFF, 0xE1, 0x81, 0xD8, 
0x3C, 0x7F, 0xFF, 0x3, 0x3, 0x98, 
0x1E, 0x7, 0xFC, 0x7, 0xF, 0xB0, 
0x1F, 0x0, 0x0, 0xF, 0x1F, 0x30, 
0xF, 0x80, 0x0, 0x3E, 0x1F, 0x30, 
0x47, 0xE0, 0x0, 0xFC, 0x3E, 0x60, 
0x63, 0xFE, 0x7, 0xF8, 0x9C, 0x60, 
0x70, 0xFF, 0xFF, 0xF0, 0x98, 0xE0, 
0x38, 0x7F, 0xFF, 0xC1, 0x0, 0xC0, 
0x3C, 0x1F, 0xFF, 0x3, 0x1, 0x80, 
0x1E, 0x0, 0xF8, 0x7, 0x3, 0x80, 
0x1F, 0x0, 0x0, 0xF, 0xF, 0x0, 
0xF, 0x80, 0x0, 0x3E, 0x3F, 0x0, 
0x7, 0xE0, 0x0, 0xFC, 0xFE, 0x0, 
0x3, 0xFC, 0x3, 0xF9, 0xFC, 0x0, 
0x0, 0xFF, 0xFF, 0xF3, 0xF8, 0x0, 
0x0, 0xFF, 0xFF, 0xE7, 0xE0, 0x0, 
0x0, 0x1F, 0xFF, 0x1F, 0x80, 0x0, 
0x0, 0x3, 0xFC, 0x1E, 0x0, 0x0
};


#define BUF_LEN 6
//only for DS18B20
String getTemp()
{
   char tempBuf[BUF_LEN];
   if (!sensors.getAddress(insideThermometer, 0))
     return String("fail");
  sensors.requestTemperatures();
  float t = sensors.getTempC(insideThermometer);
  dtostrf(t, BUF_LEN-1, 1, tempBuf);
  String str;
  //if (t > 0)
  //  str = "+";
  str = tempBuf;
  return str;
}

char tempBuf[BUF_LEN];

void draw(void) {
  // graphic commands to redraw the complete screen should be placed here  
  //u8g.setFont(u8g_font_unifont);
  u8g.setFont(u8g_font_fub20);
  
  String str = getTemp();
  str.toCharArray(tempBuf, BUF_LEN);
  u8g.drawStr( 54, 26, tempBuf);
  
  u8g.drawBitmapP( 0, 0, 6, 54, rook_bitmap);
}

void setup(void) {
  u8g.setColorIndex(1); 
  sensors.begin();
  
  
}

void loop(void) {
  // picture loop
  u8g.firstPage();  
  do {
    draw();
  } while( u8g.nextPage() );
  
  // rebuild the picture after some delay
  delay(500);
}

